#include <stdint.h>
#include <stdbool.h>

#include "efm32gg.h"

/*
 * TIMER1 interrupt handler 0b0,0b10,0b110,0b10,0b0,0b10,0b110,0b10,0b110,0b10,0b0,0b10,0b110,0b10,0b110,0b10
 */
int isOff = 0;
uint32_t amp[16] = {4,5,6,7,7,7,6,5,4,3,2,1,1,1,2,3};
uint32_t counter =0;
uint32_t period[8] = {0b1111111111,0b1111110010,0b1111100000,0b1110000000, 0b1000000000, 0b1000011011, 0b1000111111, 0b1011111111  };

uint32_t ampIndex = 0;
void __attribute__ ((interrupt)) TIMER1_IRQHandler()
{
	/*
	 * TODO feed new samples to the DAC remember to clear the pending
	 * interrupt by writing 1 to TIMER1_IFC 

	//Clear interrupt flags
	*TIMER1_IFC |= 0x1;
	*DAC0_CH0DATA = tone;	//Put data in the DAC_DATA registers, does this set the amplitude?
	*DAC0_CH1DATA = tone;
	tone ^= tone1;
	*/
	*TIMER1_IFC |= 0x1;
	*DAC0_CH0DATA = amp[ampIndex];	//Put data in the DAC_DATA registers, does this set the amplitude?
	*DAC0_CH1DATA = amp[ampIndex];
	ampIndex+=1;
	if (ampIndex == 16) ampIndex=0;
	counter+=1;
	if (counter>10000){
		counter=0;
		*TIMER1_IEN = 0;
		isOff=1;
	}

}

/*
 * GPIO even pin interrupt handler 
 */
void __attribute__ ((interrupt)) GPIO_EVEN_IRQHandler()
{

	/*
	if ((*GPIO_PC_DIN)==0b10){
		tone = 0x0;
		tone1 = 0x0;

	}
	else {

		*TIMER1_CMD ^= 0x1; //toggle the timer1 CMD
		tone = tone +1;
		tone1 = tone1+1;

		*GPIO_PA_DOUT ^= ~(*GPIO_PC_DIN << 8);

	}
*/
	//Clear interrupt flags
	*GPIO_IFC |= *GPIO_IF;
	uint32_t temp = ~*GPIO_PC_DIN;
	*GPIO_PA_DOUT = (*GPIO_PC_DIN << 8);

	// Decide wich button is pressed
	if ((temp & 0b1) == 0b1){
		*TIMER1_TOP = period[0];

	}
	else if ((temp & 0b10) == 0b10){
		*TIMER1_TOP = period[1];


	}
	else if ((temp & 0b100) == 0b100){
		*TIMER1_TOP = period[2];

		}
	else if ((temp & 0b1000)== 0b1000){
		*TIMER1_TOP = period[3];

		}
	else if ((temp & 0b10000)== 0b10000){
		*TIMER1_TOP = period[4];

		}
	else if ((temp & 0b100000)== 0b100000){
		*TIMER1_TOP = period[5];

		}
	else if ((temp & 0b1000000)== 0b1000000){
		*TIMER1_TOP = period[6];

		}
	else if ((temp & 0b10000000)== 0b10000000){
		*TIMER1_TOP = period[7];

		}
	else{
		*GPIO_PA_DOUT=0;
	}
	if(isOff == 1){
		isOff = 0;
		*TIMER1_IEN = 1;
	}




	//*GPIO_PA_DOUT ^= ~(*GPIO_PC_DIN << 8);
	//*GPIO_PA_DOUT = ~(tone << 8);
}

/*
 * GPIO odd pin interrupt handler 
 */
void __attribute__ ((interrupt)) GPIO_ODD_IRQHandler()
{
	GPIO_EVEN_IRQHandler();

}
